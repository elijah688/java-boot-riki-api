package org.example;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;
import java.util.Map;

@RestController
public class ApiController {

    private final JdbcTemplate jdbc;

    public ApiController(JdbcTemplate jdbc) {
        this.jdbc = jdbc;
    }

    @PostMapping("/posts")
    public Map<String, Object> upsertPost(@RequestBody Map<String, String> body) {
        String id = body.get("id");
        String title = body.get("title");
        String content = body.get("content");

        if (id.isBlank()) {
            id = null;
        }
        
        String sql = """
                INSERT INTO posts (id, title, content)
                VALUES (COALESCE(?::uuid, gen_random_uuid()), ?, ?)
                ON CONFLICT (id) DO UPDATE SET
                  title = EXCLUDED.title,
                  content = EXCLUDED.content,
                  created_at = NOW()
                """;

        int rowsAffected = jdbc.update(sql, id, title, content);

        return Map.of(
                "rowsAffected", rowsAffected,
                "id", id != null ? id : "generated by DB",
                "title", title,
                "content", content);
    }

    @GetMapping("/posts")
    public Map<String, Object> getPostsPaginated(
            @RequestParam(defaultValue = "10") int limit,
            @RequestParam(defaultValue = "0") int offset) {
        String sql = "SELECT * FROM posts ORDER BY created_at DESC LIMIT ? OFFSET ?";
        List<Map<String, Object>> posts = jdbc.queryForList(sql, limit, offset);

        String countSql = "SELECT COUNT(*) FROM posts";
        Integer total = jdbc.queryForObject(countSql, Integer.class);

        return Map.of(
                "limit", limit,
                "offset", offset,
                "total", total,
                "posts", posts);
    }

}
